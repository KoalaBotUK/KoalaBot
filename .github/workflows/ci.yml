name: CI

on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master, KoalaBotPublic]
  pull_request:
  pull_request_target:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  test:

    runs-on: ${{ matrix.os }}
    if: |
        (github.event_name == 'pull_request_target' && github.actor == 'dependabot[bot]') ||
        (github.event_name != 'pull_request_target' && github.actor != 'dependabot[bot]')
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: [3.7, 3.8, 3.9]

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      if: ${{ github.event_name != 'pull_request_target' }}
      uses: actions/checkout@v2

    - name: Checkout PR
      if: ${{ github.event_name == 'pull_request_target' }}
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get install libsqlcipher-dev
        elif  [ "$RUNNER_OS" == "macOS" ]; then
          echo "ENCRYPTED=False" >> $GITHUB_ENV
        fi

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      env:
        BOT_OWNER: ${{ secrets.BOT_OWNER }}
        DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
        GMAIL_EMAIL: ${{ secrets.GMAIL_EMAIL }}
        GMAIL_PASSWORD: ${{ secrets.GMAIL_PASSWORD }}
        TWITCH_SECRET: ${{ secrets.TWITCH_SECRET }}
        TWITCH_TOKEN: ${{ secrets.TWITCH_TOKEN }}
      run: |
        pytest --cov=./ --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage1.xml,./coverage2.xml
        directory: ./coverage/reports/
        flags: unittests
        env_vars: OS,PYTHON
        name: codecov-umbrella
        fail_ci_if_error: true
        path_to_write_report: ./coverage/codecov_report.txt
        verbose: true
