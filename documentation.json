[
  {
    "name": "Announce",
    "commands": [
      {
        "command": "announce addRole",
        "parameters": [],
        "description": "Add a role to list of people to send the announcement to:return:"
      },
      {
        "command": "announce",
        "parameters": [],
        "description": "Use k!announce create to create an announcement"
      },
      {
        "command": "announce cancel",
        "parameters": [],
        "description": "Cancel a pending announcement:return:"
      },
      {
        "command": "announce changeContent",
        "parameters": [],
        "description": "Change the content of the embedded message:return:"
      },
      {
        "command": "announce changeTitle",
        "parameters": [],
        "description": "Change the title of the embedded message:return:"
      },
      {
        "command": "announce create",
        "parameters": [],
        "description": "Create a new message that will be available for sending:return:"
      },
      {
        "command": "announce preview",
        "parameters": [],
        "description": "Post a constructed embedded message to the channel where the command is invoked:return:"
      },
      {
        "command": "announce removeRole",
        "parameters": [],
        "description": "Remove a role from a list of people to send the announcement to:return:"
      },
      {
        "command": "announce send",
        "parameters": [],
        "description": "Send a pending announcement:return:"
      }
    ]
  },
  {
    "name": "TwitchAlert",
    "commands": [
      {
        "command": "twitchAddTeam",
        "parameters": [
          "raw_channel_id",
          "team_name",
          "custom_live_message"
        ],
        "description": "Add a Twitch team to a Twitch Alert:return:"
      },
      {
        "command": "twitchAdd",
        "parameters": [
          "raw_channel_id",
          "twitch_username",
          "custom_live_message"
        ],
        "description": "Add a Twitch user to a Twitch Alert:return:"
      },
      {
        "command": "twitchEditMsg",
        "parameters": [
          "raw_channel_id",
          "default_live_message"
        ],
        "description": "Edit the default message put in a Twitch Alert Notificationleave empty for program default:return:"
      },
      {
        "command": "twitchList",
        "parameters": [],
        "description": "Shows all current TwitchAlert users and teams in a channel:param ctx::param raw_channel_id::return:"
      },
      {
        "command": "twitchRemoveTeam",
        "parameters": [
          "raw_channel_id",
          "team_name"
        ],
        "description": "Removes a team from a Twitch Alert:return:"
      },
      {
        "command": "twitchRemove",
        "parameters": [
          "raw_channel_id",
          "twitch_username"
        ],
        "description": "Removes a user from a Twitch Alert:return:"
      },
      {
        "command": "twitchViewMsg",
        "parameters": [
          "raw_channel_id"
        ],
        "description": "Shows the current default message for Twitch Alertsleave empty for program default:return:"
      }
    ]
  },
  {
    "name": "Verify",
    "commands": [
      {
        "command": "verifyList",
        "parameters": [],
        "description": "List the current verification setup for the server:return:"
      },
      {
        "command": "confirm",
        "parameters": [
          "token"
        ],
        "description": "Send to KoalaBot in dms to confirm the verification of an email:return:"
      },
      {
        "command": "verifyRemove",
        "parameters": [
          "suffix",
          "role"
        ],
        "description": "Disable an existing verification listener:return:"
      },
      {
        "command": "verifyAdd",
        "parameters": [
          "suffix",
          "role"
        ],
        "description": "Set up a role and email pair for KoalaBot to verify users with:return:"
      },
      {
        "command": "getEmails",
        "parameters": [
          "user_id"
        ],
        "description": "See the emails a user is verified with:return:"
      },
      {
        "command": "reVerify",
        "parameters": [
          "role"
        ],
        "description": "Removes a role from all users who have it and marks them as needing to re-verify before giving it back:return:"
      },
      {
        "command": "unVerify",
        "parameters": [
          "email"
        ],
        "description": "Send to KoalaBot in dms to un-verify an email with our system:return:"
      },
      {
        "command": "verify",
        "parameters": [
          "email"
        ],
        "description": "Send to KoalaBot in dms to verify an email with our system:return:"
      }
    ]
  },
  {
    "name": "KoalaBot",
    "commands": [
      {
        "command": "activity",
        "parameters": [
          "new_activity",
          "name"
        ],
        "description": "Change the activity of the bot"
      },
      {
        "command": "clear",
        "parameters": [
          "amount"
        ],
        "description": "Clears a given number of messages from the given channel"
      },
      {
        "command": "disableExt",
        "parameters": [
          "koala_extension"
        ],
        "description": "Disables a koala extension onto a server"
      },
      {
        "command": "enableExt",
        "parameters": [
          "koala_extension"
        ],
        "description": "Enables a koala extension onto a server, all grants all extensions"
      },
      {
        "command": "listExt",
        "parameters": [],
        "description": "Lists the enabled koala extensions of a server"
      },
      {
        "command": "loadCog",
        "parameters": [
          "extension"
        ],
        "description": "Loads a cog from the cogs folder"
      },
      {
        "command": "ping",
        "parameters": [],
        "description": "Returns the ping of the bot"
      },
      {
        "command": "support",
        "parameters": [],
        "description": "KoalaBot Support server link"
      },
      {
        "command": "unloadCog",
        "parameters": [
          "extension"
        ],
        "description": "Unloads a running cog"
      },
      {
        "command": "welcomeSendMsg",
        "parameters": [],
        "description": "Allows admins to send out their welcome message manually to all members of a guild. Has a 60 second cooldown perguild."
      },
      {
        "command": "welcomeUpdateMsg",
        "parameters": [
          "new_message"
        ],
        "description": "Allows admins to change their customisable part of the welcome message of a guild. Has a 60 second cooldown perguild."
      },
      {
        "command": "welcomeViewMsg",
        "parameters": [],
        "description": "Shows this server's current welcome message"
      }
    ]
  },
  {
    "name": "Vote",
    "commands": [
      {
        "command": "vote addOption",
        "parameters": [
          "option_string"
        ],
        "description": "Adds an option to the current voteseparate the title and description with a \"+\" e.g. option title+option description"
      },
      {
        "command": "vote addRole",
        "parameters": [
          "role"
        ],
        "description": "Adds a role to the list of roles the vote will be sent toIf no roles are added, the vote will go to all users in a guild (unless a target voice channel has been set)"
      },
      {
        "command": "vote removeOption",
        "parameters": [
          "index"
        ],
        "description": "Removes an option from a vote based on it's index"
      },
      {
        "command": "vote removeRole",
        "parameters": [
          "role"
        ],
        "description": "Removes a role to the list of roles the vote will be sent to"
      },
      {
        "command": "vote setChair",
        "parameters": [
          "chair"
        ],
        "description": "Sets the chair of a voteIf no chair defaults to sending the message to the channel the vote is closed in"
      },
      {
        "command": "vote setEndTime",
        "parameters": [
          "time_string"
        ],
        "description": "Sets a specific time for the vote to end. Results will be sent to the chair or owner if you use this, not a channel.If the vote has not been sent by the end time it will close automatically once it is sent.:return:"
      },
      {
        "command": "vote cancel",
        "parameters": [
          "title"
        ],
        "description": "Cancels a vote you are setting up or have sent"
      },
      {
        "command": "vote addOption",
        "parameters": [
          "option_string"
        ],
        "description": "Adds an option to the current voteseparate the title and description with a \"+\" e.g. option title+option description"
      },
      {
        "command": "vote addRole",
        "parameters": [
          "role"
        ],
        "description": "Adds a role to the list of roles the vote will be sent toIf no roles are added, the vote will go to all users in a guild (unless a target voice channel has been set)"
      },
      {
        "command": "vote cancel",
        "parameters": [
          "title"
        ],
        "description": "Cancels a vote you are setting up or have sent"
      },
      {
        "command": "vote list",
        "parameters": [],
        "description": "Return a list of all votes you have in this guild.:return:"
      },
      {
        "command": "vote checkResults",
        "parameters": [],
        "description": "Checks the results of a vote without closing it"
      },
      {
        "command": "vote close",
        "parameters": [],
        "description": "Ends a vote, and collects the results"
      },
      {
        "command": "vote preview",
        "parameters": [],
        "description": "Generates a preview of what users will see with the current configuration of the vote"
      },
      {
        "command": "vote removeOption",
        "parameters": [
          "index"
        ],
        "description": "Removes an option from a vote based on it's index"
      },
      {
        "command": "vote removeRole",
        "parameters": [
          "role"
        ],
        "description": "Removes a role to the list of roles the vote will be sent to"
      },
      {
        "command": "vote send",
        "parameters": [],
        "description": "Sends a vote to all users within the restrictions set with the current options added"
      },
      {
        "command": "vote setChair",
        "parameters": [
          "chair"
        ],
        "description": "Sets the chair of a voteIf no chair defaults to sending the message to the channel the vote is closed in"
      },
      {
        "command": "vote setChannel",
        "parameters": [
          "channel"
        ],
        "description": "Sets the target voice channel of a vote (Users connected to this channel will receive the vote message)If there isn't one set votes will go to all users in a guild (unless target roles have been added)"
      },
      {
        "command": "vote setEndTime",
        "parameters": [
          "time_string"
        ],
        "description": "Sets a specific time for the vote to end. Results will be sent to the chair or owner if you use this, not a channel.If the vote has not been sent by the end time it will close automatically once it is sent.:return:"
      },
      {
        "command": "vote create",
        "parameters": [
          "title"
        ],
        "description": "Creates a new vote"
      },
      {
        "command": "vote",
        "parameters": [],
        "description": "Use k!vote create <title> to create a vote!"
      }
    ]
  },
  {
    "name": "TextFilter",
    "commands": [
      {
        "command": "filterList",
        "parameters": [],
        "description": "Get a list of filtered words on the current guild.:return:"
      },
      {
        "command": "filterRegex",
        "parameters": [
          "regex",
          "filter_type",
          "too_many_arguments"
        ],
        "description": "Adds a new regex to the filtered text list:return:"
      },
      {
        "command": "filter",
        "parameters": [
          "word",
          "filter_type",
          "too_many_arguments"
        ],
        "description": "Adds a new word to the filtered text list:return:"
      },
      {
        "command": "ignoreChannel",
        "parameters": [
          "channel",
          "too_many_arguments"
        ],
        "description": "Add a new ignored channel to the database:return:"
      },
      {
        "command": "ignoreUser",
        "parameters": [
          "user",
          "too_many_arguments"
        ],
        "description": "Add a new ignored user to the database:return:"
      },
      {
        "command": "ignoreList",
        "parameters": [],
        "description": "Get a list all ignored users/channels:return:"
      },
      {
        "command": "modChannelList",
        "parameters": [],
        "description": "Get a list of filtered mod channels in the guild:return:"
      },
      {
        "command": "unignore",
        "parameters": [
          "ignore",
          "too_many_arguments"
        ],
        "description": "Remove an ignore from the guild:return:"
      },
      {
        "command": "modChannelRemove",
        "parameters": [
          "channel_id",
          "too_many_arguments"
        ],
        "description": "Remove a mod channel from the guild:return:"
      },
      {
        "command": "modChannelAdd",
        "parameters": [
          "channel_id",
          "too_many_arguments"
        ],
        "description": "Add a mod channel to the current guild:return:"
      },
      {
        "command": "unfilter",
        "parameters": [
          "word",
          "too_many_arguments"
        ],
        "description": "Remove an existing word/test from the filter list:return:"
      },
      {
        "command": "unignore",
        "parameters": [
          "ignore",
          "too_many_arguments"
        ],
        "description": "Remove an ignore from the guild:return:"
      },
      {
        "command": "modChannelRemove",
        "parameters": [
          "channel_id",
          "too_many_arguments"
        ],
        "description": "Remove a mod channel from the guild:return:"
      }
    ]
  },
  {
    "name": "ReactForRole (RFR)",
    "commands": [
      {
        "command": "rfr",
        "parameters": [],
        "description": "Group of commands for React for Role (rfr) functionality.:return:"
      },
      {
        "command": "rfr addRequiredRole",
        "parameters": [
          "role_str"
        ],
        "description": "Adds a role to perms to use rfr functionality in a server, so you can specify that you need, e.g. \"@Student\" tobe able to use rfr functionality in the server. It's server-wide permissions handling however. By default anyonecan use rfr functionality in the server. User needs to have admin perms to use.:return:"
      },
      {
        "command": "rfr edit addRoles",
        "parameters": [],
        "description": "        Adds roles to an existing rfr message. User is prompted for rfr message channel ID/name/mention, rfr message ID/        URL, emoji-role combos. Emoji-role combinations are to be given in        \\\"<emoji>, <role>\"        \\\"<emoji>, <role>\"        format. <role> can be the role ID, name or mention. `emoji` can be a custom emoji from the server, or a standard        unicode emoji. \\User needs admin perms to use.        :param ctx: Context of the command.        :return:        "
      },
      {
        "command": "rfr create",
        "parameters": [],
        "description": "Creates a new rfr message in a channel of user's choice. User is prompted for (in this order)channel ID/name/mention, message title, message description. Default title and description exist, which are\"React for Role\" and \"Roles below!\" respectively. User requires admin perms to use.:return:"
      },
      {
        "command": "rfr delete",
        "parameters": [],
        "description": "Deletes an existing rfr message. User is prompted for (in this order) channel ID/name/mention, message ID/URL,Y/N confirmation. User needs admin perms to use.:return:"
      },
      {
        "command": "rfr edit description",
        "parameters": [],
        "description": "Edit the description of an existing rfr message. User is prompted for rfr message channel ID/name/mention,rfr message ID/URL, new description, Y/N confirmation. User needs admin perms to use.:return:"
      },
      {
        "command": "rfr edit inline",
        "parameters": [],
        "description": "Edit the inline property of embed fields in rfr embeds. Can edit all rfr messages in a server or a specific one.User is prompted for whether they'd like inline fields or not, as well as details of the specific message ifthat option is selected. User requires admin perms:return:"
      },
      {
        "command": "rfr edit thumbnail",
        "parameters": [],
        "description": "Edit the thumbnail of an existing rfr message. User is prompted for rfr message channel ID/name/mention, rfrmessage ID/URL, new thumbnail, Y/N confirmation. User needs admin perms:return:"
      },
      {
        "command": "rfr edit title",
        "parameters": [],
        "description": "Edit the title of an existing rfr message. User is prompted for rfr message channel ID/name/mention,rfr message ID/URL, new title, Y/N confirmation. User needs admin perms to use.:return:"
      },
      {
        "command": "rfr edit fixEmbed",
        "parameters": [],
        "description": "Cosmetic fix method if the bot ever has a moment and doesn't react with the correct emojis/has duplicates."
      },
      {
        "command": "rfr listRequiredRoles",
        "parameters": [],
        "description": "Lists the server-specific role permissions for using rfr functionality. If list is empty, any role can use rfrfunctionality.:return:"
      },
      {
        "command": "rfr removeRequiredRole",
        "parameters": [
          "role_str"
        ],
        "description": "Removes a role from perms for use of rfr functionality in a server, so you can specify that you need, e.g.\"@Student\" to be able to use rfr functionality in the server. It's server-wide permissions handling however. Bydefault anyone can use rfr functionality in the server. User needs to have admin perms to use.:return:"
      },
      {
        "command": "rfr edit removeRoles",
        "parameters": [],
        "description": "        Removes roles from an existing rfr message. User is prompted for rfr message channel ID/name/mention, rfr message        ID/URL, emojis/roles to remove. User can specify either the emoji or the role for any emoji-role combination to        remove it, but it needs to be specified in the format below.        \\\"<emoji>/<role>\"        \\\"<emoji>/<role>\"        <role> can be the role ID, name or mention. emoji can be a custom emoji from the server, or a standard        unicode emoji. \\User needs admin perms to use.        :param ctx: Context of the command.        :return:        "
      }
    ]
  },
  {
    "name": "ColourRole",
    "commands": [
      {
        "command": "addCustomColourAllowedRole",
        "parameters": [
          "role_str"
        ],
        "description": "Adds a role, via ID, mention or name, to the list of roles allowed to have a custom colour. Needsadmin permissions to use."
      },
      {
        "command": "addProtectedRoleColour",
        "parameters": [
          "role_str"
        ],
        "description": "Adds a role, via ID, mention or name, to the list of protected roles. Needs admin permissions touse."
      },
      {
        "command": "customColour",
        "parameters": [
          "colour_str"
        ],
        "description": "For a user with the correct role to be able to change their display colour in a guild.Syntax is k!custom_colour (\"no\" / colour hex). Usage with no removes any custom colour held before.Won't accept it if the colour chosen too closely resembles a role that was protected's colour or a discordblocked colour. A role must be made and that role be added to the permissions by usage ofk!add_custom_colour_allowed_role <role>, and the command invoker must have that role before they can use thiscommand. Has a 15 second cooldown."
      },
      {
        "command": "listCustomColourAllowedRoles",
        "parameters": [],
        "description": "Lists the roles in a guild which are permitted to have their own custom colours. Requires adminpermissions to use.:return: Sends a message with the mentions of the roles that are protected in a guild."
      },
      {
        "command": "listProtectedRoleColours",
        "parameters": [],
        "description": "Lists the protected roles, whose colours are protected from being imitated by a custom colour, in aguild. Requires admin permissions to use.:return: Sends a message with the mentions of the roles that are protected in a guild"
      },
      {
        "command": "removeCustomColourAllowedRole",
        "parameters": [
          "role_str"
        ],
        "description": "Removes a role, via ID, mention or name, from the list of roles allowed to have a custom colour.Needs admin permissions to use."
      },
      {
        "command": "removeProtectedRoleColour",
        "parameters": [
          "role_str"
        ],
        "description": "Removes a role, via ID, mention or name, from the list of protected roles. Needs admin permissionsto use."
      }
    ]
  }
]